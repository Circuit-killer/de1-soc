SUMMARY: look directly to final_kernel and final_user projects!

----------------------------------------------------------------------

NOTE: remeber to program the FPGA with the script and rbf file in linux_utilities

In this folder:

 - blinker_without_kernel_module: it is a program that can access the custom component on FPGA
   as a super user, witout the need of a kernel module, acting directly on /dev/mem (non safe)

 - kernel_module: is the kernel module that make the custom module visible as a file to a user 
   space task

 - blinker_with_kernel_module: is the user space task that access the kernel module. 
   Use as ./executable [1-9] to accelerate/decelerate blinking
   
 REF: http://zhehaomao.com/blog/fpga/2013/12/29/sockit-4.html
   
----------------------------------------------------------------------
  
  blinker_with_kernel_module_v2 (OLD, DO NOT CONSIDER THIS PROJECT):
  
  NOT WORKING YET :(
  
  - blinker_with_kernel_module_v2-struct: is a user space task that access the kernel 
    module (kernel_module_v2-struct). It differns from the previous version beacuse:
    - tries to use copy_from/to_user functions. 
    - tries to write/read structs, not only a single char.
    Clean and well written, but not functional yet (copy_from/to_user fails 
    for unknown reasons). 
    
  - kernel_module_v2-struct: is the kernel module that make the custom module visible 
    as a file to a user space task
    
----------------------------------------------------------------------
  
  stevea_ experiments:
  
  IT SUCCESFULLY SENDS/RECEIVES DATA TO/FROM KERNEL also IF USER TASK RUNS as default USER!
  
  In addition it sends STRUCT!
  
  However it is not very well written and it will be used only as 
    
  - stevea_user: task that access the kernel module (stevea_kernel). 
    It differns from the previous version beacuse:
    - uses ioct + copy_from/to_user functions. 
    - write/read structs, not only a single char.
  
  - stevea_kernel:
  
----------------------------------------------------------------------

   ioctl_ experiments: (ioclt_user+ioctl_kernel):
   
   IT SUCCESFULLY SENDS/RECEIVES DATA TO/FROM KERNEL and 
   it is very well written and documented   
   
   but 
   
   the user task shuold run as super user :( (because it does not use misc_register, but a more generic one)
   It sends a STRING, not STRUCT! (but this can be easily fix checking stevea_ experiments)
  
  - ioctl_user: task that access the kernel module (stevea_kernel). 
    - uses ioct + copy_from/to_user functions. 
    - write/read tested at the same time (everything works, both ioctl and read/write)
  
  - ioctl_kernel:
  
----------------------------------------------------------------------
  
   final_ experiments (final_user, final_kernel):
  
   takes ioctl_ experiments and extend it to be registered with misc_register, 
   and consequently make them available from user space. 
   
   check #define MISC_REGISTRATION - #define CHRDEV_REGISTRATION

   This is the MOST ADVANCED KERNEL IN THIS FOLDER.
   Can be easily extended to struct looking at stevea_experiments
  
----------------------------------------------------------------------
  
  USEFUL LINKS:
  
  http://www.cs.columbia.edu/~sedwards/classes/2014/4840/device-drivers.pdf
  
  http://people.ee.ethz.ch/~arkeller/linux/multi/kernel_user_space_howto-4.html
  
  http://blackfin.uclinux.org/doku.php?id=linux-kernel:ioctls
  
  
